name: Keep Supabase Active

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: read
  models: read

jobs:
  supabase-workflow:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      AI_MODEL: ${{vars.AI_MODEL}}
      AI_PROMPT: ${{vars.AI_PROMPT}}
      TABLE_NAME: ${{vars.TABLE_NAME}}
      
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Supabase Client
        run: npm install @supabase/supabase-js
      
      - name: Setup gh models extension
        run: gh extension install github/gh-models
      
      - name: Generate data with AI
        run: |
          echo "🤖 Generating data with AI..."
          gh models run $AI_MODEL "$AI_PROMPT" > generated_data.json
          echo "✅ Data saved to generated_data.json"
          ls -la generated_data.json
      
      - name: Run Supabase Activity
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          node -e "
          (async () => {
            try {
              const fs = require('fs');
              const { createClient } = require('@supabase/supabase-js');
              
              const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);
              
              console.log('🚀 Starting Supabase activity workflow');
              
              // ファイルからデータ読み込み
              const rawData = fs.readFileSync('generated_data.json', 'utf8');

              // JSON解析
              let contentArray;
              try {
                contentArray = JSON.parse(rawData.trim());
              } catch (parseError) {
                console.error('❌ JSON parse failed:', parseError.message);
                throw new Error('AI output is not valid JSON');
              }

              // 配列かどうか検証
              if (!Array.isArray(contentArray)) {
                console.error('❌ AI output is not an array:', typeof contentArray);
                throw new Error('Expected JSON array but got: ' + typeof contentArray);
              }

              // 要素の型検証
              const invalidItems = contentArray.filter((item, index) => {
                if (typeof item !== 'string') {
                  console.warn(\`⚠️ Item \${index} is not a string:\`, typeof item);
                  return true;
                }
                return false;
              });

              if (invalidItems.length > 0) {
                console.error(\`❌ Found \${invalidItems.length} non-string items in array\`);
                throw new Error('Array contains non-string elements');
              }

              console.log('✅ AI output validation passed');
              console.log(\`📊 Valid array with \${contentArray.length} string elements\`);

              // オブジェクト配列に変換
              const data = contentArray.map(content => ({ content }));
              
              // データ挿入
              const { error } = await supabase.from(process.env.TABLE_NAME).insert(data);
              if (error) throw error;
              console.log('✅ Inserted records successfully');
              
              // 古いデータ削除（24時間以上前）
              const { error: deleteError } = await supabase
                .from(process.env.TABLE_NAME)
                .delete()
                .lt('created_at', new Date(Date.now() - 24*60*60*1000).toISOString());
              
              if (deleteError) console.warn('⚠️ Cleanup warning:', deleteError.message);
              else console.log('🧹 Cleaned up old records');
              
              console.log('🎉 Workflow completed successfully!');
              
            } catch (err) {
              console.error('❌ Error:', err.message);
              process.exit(1);
            }
          })();
          "
